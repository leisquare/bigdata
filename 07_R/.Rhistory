f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들',ls()))
}
}
f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들',ls()))
}
g(5)
}
g(5)
f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들 ',ls()))
}
g(5)
print('f함수 영역에서의 변수들, 'ls())
}
f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들 ',ls()))
}
g(5)
print('f함수 영역에서의 변수들, 'ls())
}
f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들 ',ls()))
}
g(5)
print('f함수 영역에서의 변수들, ',ls())
}
f(2)
f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들 ',ls()))
}
g(5)
print(environment())
print(paste('f함수 영역에서의 변수들, ',ls()))
}
f(2)
f<-function(f_x){
g<-function(g_x){
print('g함수 안')
print(environment())
print(paste('g함수영역에서의 변수들, ',ls()))
}
g(5)
print(environment())
print(paste('f함수 영역에서의 변수들, ',ls()))
}
f(2)
#소수 체크
a=<-function(num){
seq=(1:num-1)
}
#소수 체크
a<-function(num){
seq=(1:num-1)
}
a(5)
a(5)
#소수 체크
a<-function(num){
seq(1:num-1)
}
a(5)
print(paste(num,'은 소수'))
prime<-function(num){
b<<-0
seq(1:num-1)
for(i in seq){
b + num%%i
}
if(b==0){
print(paste(num,'은 소수'))
}
}
prime(2)
for(i in c){
b + num%%i
}
prime<-function(num){
b<<-0
c<-seq(1:num-1)
for(i in c){
b + num%%i
}
if(b==0){
print(paste(num,'은 소수'))
}else{
print(paste(num,'은 소수가 아님'))
}
}
prime(2)
prime(5)
prime(4)
prime(8)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
for(i in c){
b + num%%i
}
b
if(b==0){
print(paste(num,'은 소수'))
}else{
print(paste(num,'은 소수가 아님'))
}
}
prime(8)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
for(i in c){
b + num%%i
}
print(b)
#if(b==0){
#  print(paste(num,'은 소수'))
# }else{
#  print(paste(num,'은 소수가 아님'))
#}
}
prime(8)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
for(i in c){
b + num%%i
print(b)
}
print(b)
#if(b==0){
#  print(paste(num,'은 소수'))
# }else{
#  print(paste(num,'은 소수가 아님'))
#}
}
prime(8)
c<-seq(1:num-1)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
c
for(i in c){
b + num%%i
print(b)
}
print(b)
#if(b==0){
#  print(paste(num,'은 소수'))
# }else{
#  print(paste(num,'은 소수가 아님'))
#}
}
prime(8)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
print(c)
for(i in c){
b + num%%i
print(b)
}
print(b)
#if(b==0){
#  print(paste(num,'은 소수'))
# }else{
#  print(paste(num,'은 소수가 아님'))
#}
}
prime(8)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
print(c)
for(i in c){
b<- b + num%%i
print(b)
}
print(b)
#if(b==0){
#  print(paste(num,'은 소수'))
# }else{
#  print(paste(num,'은 소수가 아님'))
#}
}
prime(8)
prime<-function(num){
b<<-0
c<-seq(1:num-1)
print(c)
for(i in c){
b<- b + num%%i
print(b)
}
print(b)
#if(b==0){
#  print(paste(num,'은 소수'))
# }else{
#  print(paste(num,'은 소수가 아님'))
#}
}
prime(8)
prime(7)
prime<-function(num){
b<-0
c<-seq(1:num-1)
print(c)
for(i in c){
b<- b + num%%i
print(b)
}
print(b)
if(b==0){
print(paste(num,'은 소수'))
}else{
print(paste(num,'은 소수가 아님'))
}
}
prime(7)
isprime<-function(num){
b<-0
flag=FALSE
if(num>0){
flag=TRUE
for(i in 2:num-1){
if(num%%i==0){
print(paste(num,'은 소수가 아님'))
flag=FALSE
break
}
}
}
return(flag)
}
isprime(7)
isprime<-function(num){
flag=FALSE
if(num>1){
flag=TRUE
for(i in 2:(num-1)){
if(num%%i==0){
print(paste(num,'은 소수가 아님'))
flag=FALSE
break
}
}
}
return(flag)
}
isprime(7)
isprime<-function(num){
flag=FALSE
if(num==2){
return(TRUE)
}else if(num>2){
flag=TRUE
for(i in 2:(num-1)){
if(num%%i==0){
print(paste(num,'은 소수가 아님'))
flag=FALSE
break
}
}
}
return(flag)
}
isprime(7)
# 1.파일 ㅇ비출력
# 1.1 시스템 인코딩 조회
Sys.getlocate()
# 1.파일 ㅇ비출력
# 1.1 시스템 인코딩 조회
Sys.getlocale()
# 1.2 write.table
iris
class(iris)
write.table(iris,file='outData/iris.csv')
write.table(iris,file='outData/iris2.csv',sep=',')
head(iris)
write.table(iris,file='outData/iris2.csv',sep=',',row.names=FALSE)
write.table(iris,file='outData/iris2.csv',sep=',',row.names=FALSE)
write.table(iris,file='outData/iris.csv',sep=',')
InsectSprays
str(InsetcSprays)
str(InsectSprays)
write.table(InsectSprays,file='outData/insect.csv)
write.table(InsectSprays,file='outData/insect.csv')
write.table(InsectSprays,file='outData/insect.csv',sep=',')
# 1.3 read.table; 파일을 읽어 데이터프레임 형태로 저장
irisData<-read.table('outData/iris.csv',header = TRUE, quote = FALSE, encoding='utf-8')
# 1.3 read.table; 파일을 읽어 데이터프레임 형태로 저장
irisData<-read.table('outData/iris.csv', sep=',',header = TRUE, encoding='utf-8')
head(irisData)
tail(irisData)
str(irisData)
irisData$Species <-as.factor(irisData$Species)
irisData$Species <- as.factor(irisData$Species)
irisData$Species <- factor(irisData$Species, levels=c())
levels(iris)
levels(irisData$Species)
levels(iris$Species)
iris$Species
irisData$Species <- as.factor(irisData$Species)
iris$Species
irisData$Species <- factor(irisData$Species, levels=c())
iris$Species
irisData$Species <- factor(irisData$Species, levels=c("setosa","versicolor","virginica" ))
levels(iris$Species)
str(iris$Species)
nrow(iris)
summary(iris)
# 1.3 read.table; 파일을 읽어 데이터프레임 형태로 저장
irisData<-read.table('outData/iris.csv', sep=',',header = TRUE, encoding='utf-8')
str(irisData)
irisData$Species <- factor(irisData$Species, levels=c("setosa","versicolor","virginica" ))
str(irisData)
#숫자는 numeric으로 문자는 cha로 들어옴
irisData<-read.table('outData/iris.csv', sep=',',header = TRUE, encoding='utf-8',stringsAsfactors=TRUE)
#숫자는 numeric으로 문자는 cha로 들어옴
irisData<-read.table('outData/iris.csv', sep=',',header = TRUE, encoding='utf-8',stringsAsFactors=TRUE)
str(irisData)
str(irisData)
str(iris$Species)
summary(iris)
str(irisData)
# 1.3 read.table; 파일을 읽어 데이터프레임 형태로 저장
irisData<-read.table('outData/iris.csv', sep=',',header = TRUE, encoding='utf-8')
str(irisData)
#숫자는 numeric으로 문자는 cha로 들어옴
irisData<-read.table('outData/iris.csv', sep=',',header = TRUE, encoding='utf-8',stringsAsFactors=TRUE)
str(irisData)
#1.4 write.csv
write.csv(iris,file = 'outData/iris1.csv')
write.csv(iris,file = 'outData/iris1.csv',quote=FALSE)
#1.4 write.csv
write.csv(iris,file = 'outData/iris2.csv')
#1.5 read.csv
newData <- read.csv('outData/iris2.csv',header = TRUE,srtingAsFactors=T)
#1.5 read.csv
newData <- read.csv('outData/iris2.csv',header = TRUE,srtingsAsFactors=T)
#1.5 read.csv
newData <- read.csv('outData/iris1.csv', header = TRUE , srtingsAsFactors=T)
#1.5 read.csv
newData <- read.csv('outData/iris1.csv', header = TRUE , stringsAsFactors=T)
str(newData)
head(newData0)
head(newData)
summary(newData)
cat('iris 요약: ','\n',irisSummary,file='outData/irisSummary.txt')
#1.6 cat ; 분석 결과 등을 저장할 때
irisSummary <- summary(newData)
cat('iris 요약: ','\n',irisSummary,file='outData/irisSummary.txt')
cat('iris 요약: ','\n',irisSummary,file='outData/irisSummary.txt',append=TRUE)
cat('iris 요약: ','\n',irisSummary,file='outData/irisSummary.txt',append=TRUE,Encoding'UTP-8')
cat('iris 요약: ','\n',irisSummary,file='outData/irisSummary.txt',append=TRUE,Encoding='UTP-8')
cat('iris 요약: ','\n',irisSummary,file='outData/irisSummary.txt',append=TRUE,Encoding='UTP-8')
summary(newData)
class(irisSummary)
nrow(irisSummary )
for(i in 1:nrow(irisSummary)){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T, Encoding='UTP-8')
}
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T, Encoding='utf-8')
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T, Encoding='utf-8')
cat('iris 요약: ','\n',file='outData/irisSummary.txt',Encoding='utf-8')
irisSummary
for(i in 1:nrow(irisSummary)){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T, Encoding='utf-8')
}
cat('iris 요약: ','\n',file='outData/irisSummary.txt',Encoding='utf-8')
for(i in 1:nrow(irisSummary)){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T)
}
cat('iris 요약: ','\n',file='outData/irisSummary.txt')
for(i in 1:nrow(irisSummary)){
cat(irisSummary[i,],'\n',file='outData/irisSummary.txt',append=T)
}
# 2.1 apply:
# iris 데이터의 열별 평균, 행별 평균
apply(iris[1:4,])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
# 2.1 apply:
# iris 데이터의 열별 평균, 행별 평균(합계, 분산, 표준편차, 최소값, 최대값)
#apply(대상 자료, 1또는2,함수)1은 행별 함수 수행, 2는 열별 함수 수행
head(iris[1:4,])
setosa<-subset(iris, subset=(iris$Species == 'setosa'))
setosa
b<-subset=(iris$Species)
b<-subset=(iris$Species)
iris$Species
iris
apply(iris[,5],2,mean])
apply(iris[,5],2,mean)
apply(iris[,5],2,mean) #열별평균
apply(iris[,1:4],2,mean)
apply(iris[,5],2,mean) #열별평균
apply(iris[,-5],2,mean) #열별평균
apply(subset(iris, subset=(iris$Species == 'setosa'),select=-5),2,mean
apply(subset(iris, subset=(iris$Species == 'setosa'),select=-5),2,mean)
apply(subset(iris, subset=(iris$Species == 'virginica'),select=-5),2,mean)
apply(subset(iris, subset=(iris$Species == 'setosa'),select=-5),2,mean)
apply(iris[1:4,],2,FUN=mean)#열별 평균균
apply(iris[,1:4],2,FUN=mean)#열별 평균균
apply(iris[,1:4],2,FUN=mean) #열별 평균
apply(iris[,1:4],2,FUN=sd) #열별 표준편차
apply(iris[,1:4],2,FUN=sum) #열별 합계
apply(iris[,1:4],2,FUN=median) #열별 중앙값
apply(iris[,1:4],2,FUN=min) #열별 최소값
apply(iris[,1:4],2,FUN=max) #열별 최대값
name<-c('김','홍','박','이','윤')
kor<-c(90,50,70,60,100)
eng<-c(100,40,50,60,70)
mat<-c(90,91,50,64,80)
student<- data.frame(name,kor,eng,mat)
student
apply(stydent[2:4,],1,mean)
apply(student[2:4,],1,mean)
apply(student[2:4,],1,FUN=mean)
apply(student[2:4,],2,FUN=mean)
apply(student[,2:4],2,FUN=mean)
student
apply(student[-1],2,FUN=mean)
apply(student[-1,],2,FUN=mean)
apply(student[,-1],2,FUN=mean)
apply(student[1:5,-1],2,FUN=mean)
apply(student[,-1],1,FUN=mean)
apply(student[,-1],2,FUN=mean)
exp(-3:3)
exp(-3:3)
# 2.2 lapply: list apply(결과도 list)
x<-list(a=1:10,beta=exp(-3:3),logic=c(T,F,T,F))
x
lapply(x,mean)
lapply(x,quantile)
lapply(x,quantile,1:3/4)
sapply(x,quantile)
# 2.3 sapply: lapply와 유사하나 결과가 행렬이나 벡터로 반환
sapply(x,mean)
sapply(x,quantile)
sapply(x,quantile,1:3/4)
fivenum(0:100)
i39<-sapply(c(3:9),seq)
i39
sapply(i39,fivenum)
lapply(i39,fivenum)
irisList <- as.list
irisList <- as.list(iris[,1:4])
irisList
lapply(irisList,mean)
sapply(irisList,mean)
vapply(irisList,mean)
# 2.4 vapply : sapply : FUN의 모든 값이 특별 value타입과 호환되는지 확인
vapply(irisList, mean, numeric(1))
sapply(i39,fivenum, FUN.VALUE=c(numeric(1),numeric(1),numeric(1),numeric(1),numeric(1)))
# 2.4 vapply : sapply : FUN의 모든 값이 특별 value타입과 호환되는지 확인
vapply(irisList, mean, numeric(1))
sapply(i39,fivenum, FUN.VALUE=c(numeric(1),numeric(1),numeric(1),numeric(1),numeric(1)))
vapply(i39,fivenum, FUN.VALUE=c(numeric(1),numeric(1),numeric(1),numeric(1),numeric(1)))
cities<-c('Seoul','Busan','New Yotk','Tokyo')
nchar(cities[1])
sapply(cities,nchar)
cities<-c('Seoul','Busan','New York','Tokyo')
nchar(cities[1])
sapply(cities,nchar)
lapply(citids,nchar)
lapply(cities,nchar)
vapply(cities,nchar,FUN.VALUE=numeric(1))
vapply(cities,nchar,FUN.VALUE=numeric(2))
vapply(cities,nchar,FUN.VALUE=numeric(1))
# 2.5 mapply:apply같으나 여러개의 인자를 함수에 전달
rep(c(1,2,3)3)
# 2.5 mapply:apply같으나 여러개의 인자를 함수에 전달
rep(c(1,2,3),3)
# 2.5 mapply:apply같으나 여러개의 인자를 함수에 전달
rep(c(1,2,3),each=3)
# 2.5 mapply:apply같으나 여러개의 인자를 함수에 전달
rep(c(1,2,3),each=3,times=2)
mapply(rep,x=1:4,times=4:10)
mapply(rep,x=1:4,times=4:1)
#직업별 수입
job<-c(5,5,3,2,2,3,5,3,4,4,6,3)
income<-c(4879,6509,4183,0,3894,0,3611,6454,4975,8780,4362)
cust<-data.frame(job.income)
cust<-data.frame(job,income)
#직업별 수입
job<-c(3,3,5,2,2,3,5,3,4,4,6,3)
income<-c(4879,6509,4183,0,3894,0,3611,6454,4975,8780,4362)
cust<-data.frame(job,income)
#직업별 수입
job<-c(3,3,5,2,2,3,5,3,4,4,6,3)
income<-c(4879,6509,4183,0,3894,0,3611,6454,4975,8780,0,4362)
cust<-data.frame(job,income)
cust
