length(cust_id)
length(hos_day)
# 보험회사의 고객들이 보험금을 청구하는 데이터에서 고객별 입원일 조회
cust_id<-c(1005,1002,1003,1004,1005,1001,1005,1002,1003,1005)
hos_day<-c(2,3,20,5,13,0,8,2,3,16)
length(cust_id)
length(hos_day)
data<-data.frame(cust_id,hos_day)
day_per_cust(aggregate(data$hos_day,by=lst(dada$cust_id,sum))
day_per_cust(aggregate(data$hos_day,by=lst(dada$cust_id),sum))
day_per_cust<-aggregate(data$hos_day,by=lst(dada$cust_id),sum))
day_per_cust<-aggregate(data$hos_day,by=lst(dada$cust_id),sum)
day_per_cust<-aggregate(data$hos_day,by=list(dada$cust_id),sum)
day_per_cust<-aggregate(data$hos_day,by=list(data$cust_id),sum)
day_per_cust
day_per_cust
names(day_per_cust)<-('cust_id','hos_day')
names(day_per_cust)<-c('cust_id','hos_day')
day_per_cust
day_per_cust[order(day_per_cust$hos_day)]
day_per_cust[order(day_per_cust$hos_day),]
livrary(doBy)
library(doBy)
summaryBy(hos_day~cust_id,data=data,FUN=c(sum,mean))
#10. 조건으로 색인찾기
subset(iris,iris$Species=='setosa')
which(iris$Species=='setosa') #조건으로 색인 추출
iris[which(iris$Species=='setosa') ]
iris[which(iris$Species=='setosa'), ] #조건을 이용해서 데이터 출력
iris[which.max(iris$Sepal.Length), ]
iris[which.max(iris$Sepal.Length), ] #sepal.Length가 제일 큰 row 출력력
iris[which.max(iris$Sepal.Length), ]
which.max(iris$Sepal.Length)
#[문제1] 1부터 10사이의 벡터를 만들어서 v1 이라는 변수에 저장한다.
v1<-c(1,2,3,4,5,6,7,8,9,10)
v2<=2*v1
v2<-2*v1
max_b<=max(v2)
max_v<=max(v2)
max_v<-max(v2)
min_v<-min(v2)
avg_v<-avg(v2)
avg_v<-mean(v2)
sum_v<-sum(v2)
v3<-(v2,[-5])
v3<-v2[-5]
v1
v2
v3
max_v
min_v
avg_v
sum_v
#[문제2] 10 에서 38사이의 숫자 중에서 2씩 증가한 값으로 벡터를 생성하고 3행 5열의 매트릭스를 만들어 m1 에 저장한다.(행 우선 저장)
m1<-seq(10,38,2)
#[문제2] 10 에서 38사이의 숫자 중에서 2씩 증가한 값으로 벡터를 생성하고 3행 5열의 매트릭스를 만들어 m1 에 저장한다.(행 우선 저장)
v<-seq(10,38,2)
m1<-matrix(v,ncol=5,byrow=T)
m1m <- matrix(c(nums, result), ncol=5, byrow = T,
m1
iris[which.max(iris$Sepal.Length), ]
m1
m2<-m1+100
m2
m_max_v<-max(m1)
m_min_v<-min(m1)
row_max<-apply(m1[,1:5],2,FUN=max)
m1<-matrix(v,ncol=5,byrow=T)
m1<-matrix(v,ncol=5,byrow=T)
m1
row_max<-apply(m1[,1:5],1,FUN=max)
col_max<-apply(m1[,1:5],2,FUN=max)
col_max
m1
m2
m_max_b
m_max_v
m_min_v
row_max
col_max
seq(1:9,2)
sq1<-seq(1:9,2)
sq1<-seq(1:9)
sq1<-seq(1:9,2)
sq1<-seq(1,9,2)
rp1<-rep(1,5)
rp2<-rep((1,3),3)
rp2<-rep(1:3,times=3)
rp3<-rep(1:4,each=2)
v3<- seq(1,10,3)
a<-seq(1,100)
sampleBy(~,data=a,frac=0.7) #그룹별 20퍼센트씩 샘플링하는 방법. 비복원추출
sampleBy(data=a,frac=0.7) #그룹별 20퍼센트씩 샘플링하는 방법. 비복원추출
a
m1<-matrix(c(n1,n2,n3),ncol=3,byrow=T)
n1<-c(1,2,3)
n2<-c(3,4,5)
n3<-c(7,8,9)
m1<-matrix(c(n1,n2,n3),ncol=3,byrow=T)
m1
n1<-c(1,2,3)
n2<-c(3,4,5)
n3<-c(7,8,9)
m1<-matrix(c(n1,n2,n3),ncol=3)
m1
n1<-c(1,2,3)
n2<-c(4,5,6)
n3<-c(7,8,9)
m1<-matrix(c(n1,n2,n3),ncol=3)
m1
# [문제7] 다음과 같이 값이 구성되는 매트릭스를 정의하여 m2 에 저장한다.
m2<-matrix(seq(1,9),ncol=3)
m2
# [문제7] 다음과 같이 값이 구성되는 매트릭스를 정의하여 m2 에 저장한다.
m2<-matrix(seq(1,9),ncol=3,byrow=T)
m2
c('row1','row2','row3'))
dimnames = list(c('col1','col2','col3'),
c('row1','row2','row3'))
# [문제8]  m2 를 가지고 다음과 같이 값이 구성되는 매트릭스를 정의하여 m3 에 저장하고 출력한다.
m3<-matrix(m2,ncol=3,byrow=T,
dimnames = list(c('col1','col2','col3'),
c('row1','row2','row3')))
m3
# [문제8]  m2 를 가지고 다음과 같이 값이 구성되는 매트릭스를 정의하여 m3 에 저장하고 출력한다.
m3<-matrix(m2,ncol=3,byrow=F,
dimnames = list(c('col1','col2','col3'),
c('row1','row2','row3')))
m3
# [문제8]  m2 를 가지고 다음과 같이 값이 구성되는 매트릭스를 정의하여 m3 에 저장하고 출력한다.
m3<-matrix(m2,ncol=3,byrow=F,
dimnames = list(c('row1','row2','row3'),
c('col1','col2','col3')))
m3
m2
# [문제9] 다음과 같이 구성 되는 2행 3열 매트릭스 alpha를 생성한 후에
alpha<-matrix(c(a,b,c,d,e,f),ncol=3)
alpha
# [문제9] 다음과 같이 구성 되는 2행 3열 매트릭스 alpha를 생성한 후에
alpha<-matrix(c('a','b','c','d','e','f'),ncol=3)
alpha
alpha2<-rbind(alpha,c('x','y','z'))
alpha2
alpha3<-cbind(alpha,c('s','p'))
alpha3
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-(seq(1,6),ncol3)
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-(seq(1,6),ncol=3)
seq(1,6)
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-(c(seq(1,6)),ncol=3)
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-matrix((seq(1,6),ncol=3)
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-vector((seq(1,6),ncol=3)
# [문제7] 다음과 같이 값이 구성되는 매트릭스를 정의하여 m2 에 저장한다.
m2<-matrix(seq(1,9),ncol=3,byrow=T)
m2
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-vector(seq(1,6),ncol=3)
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-matrix(seq(1,6),ncol=3)
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-matrix(seq(1,6),ncol=3)
vettor2<-matrix(seq(7,12),ncol=3)
vector3<-matrix(seq(13,18),ncol=3)
vettor4<-matrix(seq(19,24),ncol=3)
a<-array(c(vector1,vector2,vector3,vector4),dim=c(2,3,4))
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-matrix(seq(1,6),ncol=3)
vector2<-matrix(seq(7,12),ncol=3)
vector3<-matrix(seq(13,18),ncol=3)
vector4<-matrix(seq(19,24),ncol=3)
a<-array(c(vector1,vector2,vector3,vector4),dim=c(2,3,4))
a
a[2,3,4]
a[2,,]
a[,1,]
-a[,1,]
# (5) a라는 배열을 구성하는 모든 데이터에 +100을 연산하여 출력한다.
a+100
# (4) 3층의 모든 데이터를 출력한다.
a[,,3]
# (6) 4층의 모든 데이터들에 100을 곱한 결과를 출력한다.
100*a[,,4]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,2+3,]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,2&3,]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,2,]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,2&3,]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,2*3,]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,(2,3),]
# (7) 각층의 1행, 2열과3열만 출력한다.
a[1,-1,]
# (7) 각층의 1행, 2열과3열만 출력한다.
print(a[1,-1,])
# (8) 2층의 2행 데이터들의 값을 100을 더한 값으로 변경한다.
a<-a[2,2,]-100
a
# [문제9] 다음과 같이 구성 되는 2행 3열 매트릭스 alpha를 생성한 후에
alpha<-matrix(c('a','b','c','d','e','f'),ncol=3)
alpha2<-rbind(alpha,c('x','y','z'))
alpha3<-cbind(alpha,c('s','p'))
# [문제10] 다음과 같이 값이 구성되는 배열을 정의하여 a 라는 변수에 저장한다.
vector1<-matrix(seq(1,6),ncol=3)
vector2<-matrix(seq(7,12),ncol=3)
vector3<-matrix(seq(13,18),ncol=3)
vector4<-matrix(seq(19,24),ncol=3)
a<-array(c(vector1,vector2,vector3,vector4),dim=c(2,3,4))
# (8) 2층의 2행 데이터들의 값을 100을 더한 값으로 변경한다.
a[2,2,]<-a[2,2,]-100
a
# (8) 2층의 2행 데이터들의 값을 100을 더한 값으로 변경한다.
a[2,2,]<-a[2,2,]+100
# (8) 2층의 2행 데이터들의 값을 100을 더한 값으로 변경한다.
a[2,,2]<-a[2,,2]+100
a
# (9) 1층의 모든 데이터들의 값에 2를 뺀 값으로 변경한다.
a[,,1]<-a[,,1]-2
a
# (10) a 배열의 모든 데이터 값들을 10을 곱한 값으로 변경한다.
a<-a*10
a
rm(a)
a
# [문제11] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df1 에 저장한다.
df1<-data.frame(seq(1,10),byrow=T)
df1
# [문제11] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df1 에 저장한다.
df1<-data.frame(seq(1,10),ncols=2,byrow=T)
df1
# [문제11] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df1 에 저장한다.
df1<-data.frame(seq(1,10),ncol=2,byrow=T)
df1
student_data
# 10. 데이터 프레임
student_id <- c('20211','20212','20213','20214')
student_name<-c('hin','eric','den','kei')
student_eng<-c(60,85,90,95)
student_kor<-c(100,95,95,90)
student_gender<-c('남','여','남','여')
student_data <- data.frame(student_id,student_name,student_eng,student_kor,student_gender)
student_data
# [문제11] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df1 에 저장한다.
df1<-data.frame(seq(1,5),seq(2,10,2))
df1
names(df1) <-c("x","y")
df1
# [문제12] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df2 에 저장한다.
df1<-data.frame(seq(1,5),c('a','b','c','d','e'),seq(6,10))
names(df2) <-c("col1","col2","col3")
# [문제12] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df2 에 저장한다.
df2<-data.frame(seq(1,5),c('a','b','c','d','e'),seq(6,10))
names(df2) <-c("col1","col2","col3")
df2
# [문제11] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df1 에 저장한다.
df1<-data.frame(seq(1,5),seq(2,10,2))
names(df1) <-c("x","y")
df1
# [문제12] 다음과 같이 값이 구성되는 데이터프레임을 정의하여 df2 에 저장한다.
df2<-data.frame(seq(1,5),c('a','b','c','d','e'),seq(6,10))
names(df2) <-c("col1","col2","col3")
df2
name<-c('사과','딸기','수박')
price<-c('1800','1500','3000')
amount<-c(24,38,13)
df3<-data.frame(name,price,amount)
df3
str(df3)
name<-c('사과','딸기','수박')
price<-c(1800,1500,3000)
amount<-c(24,38,13)
df3<-data.frame(name,price,amount)
df3
name<-c('사과','딸기','수박')
price<-c(1800,1500,3000)
amount<-c(24,38,13)
df3<-data.frame(name,price,amount)
names(df3) <-c("제품명","가격","판매량")
df3
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
price.avg
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
avg(price)
#직업별 수입
job<-c(3,3,5,2,2,3,5,3,4,4,6,3)
income<-c(4879,6509,4183,0,3894,0,3611,6454,4975,8780,0,4362)
cust<-data.frame(job,income)
cust
income.avg<-c(900,0,3500,3600,3700,3800,3900,4000)
income.avg
names(income.avg)<-0:7
income.avg
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(price)
mean(amount)
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3.가격격)
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3.가격)
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(price)
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3[,2])
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3("가격격"))
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3("가격"))
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3('가격격'))
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3('가격'))
# [문제14] 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구하여 출력한다.
mean(df3[,2])
mean(df3[,3])
name <- c(“Potter”, “Elsa”, “Gates”, “Wendy”, “Ben”)
gender <- factor(c(“M”, “F”, “M”, “F”, “M”))
math <- c(85, 76, 99, 88, 40)
name <- c('Potter', 'Elsa', 'Gates', 'Wendy', 'Ben')
gender <- factor(c('M', 'F', 'M', 'F', 'M'))
math <- c(85, 76, 99, 88, 40)
df4<-data.frame(name,gender,math)
str(df4)
# [문제16] 다음과 같이 값이 구성되는 리스트를 정의하여 L1 에 저장한다.
L1 <- list(name='scott',sal=3000)
Li
L1
result1<-student$sal*2
result1<-Li$sal*2
result1<-L1$sal*2
result1
# [문제17] 다음과 같이 값이 구성되는 리스트를 정의하여 L2 에 저장한다.
Ls<-list([2]=100,200,300)
L2<-list
L2[[1]]<-"scott"
L2[[1]]<-("scott")
L2[[1]]<-('scott')
L2[[1]]<-'scott'
L2[[1]]<-3000
L2[1<-3000
L2[1]<-3000
L2
L2[1]<-3000
result1
L1
L2<-list("scott",3000)
L2
L2<-list("scott",(100,200,300)
L2<-list("scott",(100,200,300))
L2<-list("scott",c(100,200,300))
L2
# [문제19] 다음 리스트에서 첫 번째 원소(alpha)의 각 값에 10을 더하여 출력한다.
list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
list$alpha<-list$alpha+10
list$alpha+10
list$alpha
# [문제18] 다음 리스트에서 A를 "Alpha"로 대체한다.
li<-list(c(3,5,7), c('A', 'B', 'C'))
li
li[[2]]
li[[2]]<-c('Alpha', 'B', 'C')
li
list$alpha
# [문제19] 다음 리스트에서 첫 번째 원소(alpha)의 각 값에 10을 더하여 출력한다.
list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
list$alpha
li[[2]](1)
li[[2,1]]
# [문제19] 다음 리스트에서 첫 번째 원소(alpha)의 각 값에 10을 더하여 출력한다.
list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
a<-list$alpha
# 리스트
student <- list(name='홍길동',age=25)
student
studentVector<-unlist(student)
studentVector
s<-c('홍길동',25)
names(s)<-c('name','age')
student<-as.list(s)  #as.list(): list형으로 형변환
student['name']
aVector<-unlist(a)
# [문제19] 다음 리스트에서 첫 번째 원소(alpha)의 각 값에 10을 더하여 출력한다.
a<-list(alpha=0:4, beta=sqrt(1:5), gamma=log(1:5))
aVector<-unlist(a)
a
b<-alpha=10
b<-alpha=10
b<-alpha+10
b<-aVector$alpha+10
# [문제20] 다음 리스트는 math, writing, reading의 중간고사 및 기말고사 점수이다.
#전체 평균을 계산하여 출력한다.
a<- list(math=list(95, 90), writing=list(90, 85), reading=list(85, 80))
a
unlist(a)
mean(a)
mean(a)
# 7. 리스트
student <- list(name='홍길동',age=25)
student
studentVector<-unlist(student)
studentVector
mean(a(2,0))
# [문제20] 다음 리스트는 math, writing, reading의 중간고사 및 기말고사 점수이다.
#전체 평균을 계산하여 출력한다.
a<- list(math=list(95, 90), writing=list(90, 85), reading=list(85, 80))
unlist(a)
mean(a(2,0))
mean(a[,2])
mean(a[1,])
mean(a[,1])
mean(a[,2])
mean(a[2,])
a
a[2]
NROW(a)
unlist(a)
unlist(a)
mean(unlist(a))
# [문제22] iris 데이터를 정렬한다
orderBy(~Petal.Length,data=iris)
# [문제22] iris 데이터를 정렬한다
orderBy(~-Petal.Length,data=iris)
# [문제22] iris 데이터를 정렬한다
order(-iris$Petal.Length)
# [문제22] iris 데이터를 정렬한다
order(-iris$Petal.Length)
order(-iris$Sepal.Width)
#iris 데이터를 Sepal.Length(내림차순),Sepal.width(오름차순)
order(-iris$Sepal.Length,iris$Sepal.Width)
iris[order(-iris$Sepal.Length,iris$Sepal.Width),c(1,2,5)]
# [문제22] iris 데이터를 정렬한다
iris[order(-iris$Petal.Length),]
# [문제22] iris 데이터를 정렬한다
iris[order(-iris$Petal.Length),]
iris[order(-iris$Sepal.Width),]
# [문제22] iris 데이터를 정렬한다
iris[order(-iris$Petal.Length),]
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
split(iris.temp$Sepal.Length,iris.temp$Species)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
split(iris$Sepal.Length,iris.temp$Species)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
split(iris$Species)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
split(iris$Species)
# 종별 중앙값
split(iris.temp$Sepal.Length,iris.temp$Species) #결과는 list
# 8. 데이터 프레임 이름 생략하기
# 8.1 with, within절
iris.temp<- iris
iris.temp[c(1,3),1] #<-NA
head(iris.temp,3)
# 종별 중앙값
split(iris.temp$Sepal.Length,iris.temp$Species) #결과는 list
table(iris$Species)
# [문제 23] iris 데이터의 종별 데이터 개수 출력한다
table(iris$Species)
#9.2 aggregate : 데이터를 하위 집합으로 분할하고 요약통계 계산
aggregate(iris[,1:4],by=list(iris[,5]),mean)
#9.2 aggregate : 데이터를 하위 집합으로 분할하고 요약통계 계산
aggregate(iris[,1:4],by=list(iris[,5]),sub
#9.2 aggregate : 데이터를 하위 집합으로 분할하고 요약통계 계산
aggregate(iris[,1:4],by=list(iris[,5]),sub)
#9.2 aggregate : 데이터를 하위 집합으로 분할하고 요약통계 계산
aggregate(iris[,1:4],by=list(iris[,5]),sum
#9.2 aggregate : 데이터를 하위 집합으로 분할하고 요약통계 계산
aggregate(iris[,1:4],by=list(iris[,5]),sum)
# cust의 직업별 평균을 income과 imcpme2를 한번에
by(cust[,c('income','income2')],cust[,'job'],summary)
cust$income2<-mapply(zero2mean,cust$job,cust$income)
cust
# cust의 직업별 평균을 income과 imcpme2를 한번에
by(cust[,c('income','income2')],cust[,'job'],summary)
#직업별 수입
job<-c(3,3,5,2,2,3,5,3,4,4,6,3)
income<-c(4879,6509,4183,0,3894,0,3611,6454,4975,8780,0,4362)
cust<-data.frame(job,income)
cust
income.avg<-c(900,0,3500,3600,3700,3800,3900,4000)
income.avg
names(income.avg)<-0:7
income.avg
cust$income2<-mapply(zero2mean,cust$job,cust$income)
cust
# cust의 직업별 평균을 income과 imcpme2를 한번에
by(cust[,c('income','income2')],cust[,'job'],summary)
apply(iris[,1:4],2,FUN=sum) #열별 합계
apply(iris$Species,FUN=sum) #열별 합계
apply(subset(iris, subset=(iris$Species == 'setosa'),select=-5),2,mean)
apply(subset(iris, subset=(iris$Species == 'virginica'),select=-5),2,mean)
apply(iris[,-5],2,mean) #열별평균
#[문제 24] 종별 Sepal.Length의 합을 출력한다.
apply(subset(iris, subset=(iris$Species == 'virginica'),select=1),2,mean)
#[문제 24] 종별 Sepal.Length의 합을 출력한다.
apply(subset(iris, subset=(iris$Species == 'setosa'),select=1),2,mean)
apply(subset(iris, subset=(iris$Species == 'virginica'),select=1),2,mean)
#[문제 24] 종별 Sepal.Length의 합을 출력한다.
apply(subset(iris, subset=(iris$Species == 'setosa'),select=1),2,sub)
#[문제 24] 종별 Sepal.Length의 합을 출력한다.
apply(subset(iris, subset=(iris$Species == 'setosa'),select=1),2,sum)
apply(subset(iris, subset=(iris$Species == 'virginica'),select=1),2,sum)
apply(subset(iris, subset=(iris$Species == 'versicolor'),select=1),2,sum)
irisList <- as.list(iris[,1:4])
irisList
lapply(irisList,mean)
sapply(irisList,mean)
