(airquality)
(airquality)
view(airquality)
View(airquality)
library(reshape2)
install.packages(reshape2)
install.packages("reshape2")
library(reshape2)
airquality.melt<- melt(airquality,id=c('Month','Day'))
view(airquality.melt)
view(airquality.melt)
View(airquality.melt)
airquality[airquality$Month==5&airquality$Day==1,]
suvset(airquality,Month==5&Day==1)
subset(airquality,Month==5&Day==1)
airquality.melt[airquality.melt$Month==5&airquality.melt$Day==1]
subset(airquality,Month==5&Day==1)
airquality.melt[airquality.melt$Month==5& airquality.melt$Day==1]
airquality.melt[airquality.melt$Month==5& airquality.melt$Day==1,]
subset(airquality.melt.Month==5&Day==5)
subset(airquality.melt, Month==5&Day==5)
airquality[airquality$Month==5&airquality$Day==5,]
subset(airquality,Month==5&Day==5)
#melt된 데이터를 원상복구: dcast vs acast
airquality.dc<-dcast(airquality.melt,Month+Day~variable)
airquality.dc
#melt된 데이터를 원상복구: dcast vs acast
airquality.dc<-dcast(airquality.melt,Month+Day~variable)
head(airquality.dc)
airqualith.ac<-acast(airquality.melt.Month+Day~variable)
airquality.ac['5_1']
airqualith.ac<-acast(airquality.melt.Month+Day~variable)# month,day 행이름으로.
head(airquality.ac)
airquality.ac['5_1']
#melt된 데이터를 원상복구: dcast vs acast
airquality.dc<-dcast(airquality.melt,Month+Day~variable) # month,day 변수로
head(airquality.dc)
airquality.ac['5_1',]
airqualith.ac<-acast(airquality.melt.Month+Day~variable)# month,day 행이름으로.
airquality.ac<-acast(airquality.melt.Month+Day~variable)# month,day 행이름으로.
head(airquality.ac)
airquality.ac<-acast(airquality.melt.Month+Day~variable)# month,day 행이름으로.
airquality.ac<-acast(airquality.melt,Month+Day~variable)# month,day 행이름으로.
head(airquality.ac)
airquality.ac['5_1',]
# 3. 데이터 테이블: 짧고 유연한 구문 사용을 위해 데이터 프레임에서 상속받음
flights_df<-read.csv("inData/flights14.csv")
flights_df
head(flights_df)
flights_df
library("readxl")
library(readxl)
exam<-read_excel("inData/exam.xlsx")
class(exam)
install.packages("data.table") #fread()
library(data.table)
flight<-fread("inData/flight14.csv")
flight
library(data.table)
flight<-fread("inData/flight14.csv")
flight<-fread("inData/flights14.csv")
flight
flights_df
#flights_df 데이터프레임에 대해 작성 제출
#1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
library(sqldf)
sqldf("select from flights_df")
sqldf("select * from flights_df")
str(flights_df)
library(dplyr)
flights_df %>%
filter(origin=='JFK'&month=5)
flights_df %>%
filter(origin=='JFK' & month==5)
resul<- flights_df %>%
filter(origin=='JFK' & month==5)
resul
#2. 처음 두 행을 resul에 얻는다
resul<-flights_df %>%
filter(origin=='JFK' & month==5) %>%
head(2)
resul
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(-origin)%>%
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(-origin)
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(-origin)
arrange(desc(origin)
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(desc(origin))
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(desc(origin))
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(desc(origin))
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(asc(origin))
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(ascending(origin))
#3. origin으로 오름차순, desc로 내림차순으로 정렬하여 출력
flights_df %>%
arrange(origin)
#4. arr_delay열만 출력
flights_df %>%
select(arr_delay)
str(flights_df)
flights_df %>%
select([,1:4])
flights_df %>%
select(year:dep_time)
#6. year열과 dep_time열 출력
flights_df %>%
select(year,dep_time)
#8. 지연시간(arr_delay, dep_delay모두 0미만인 비행이 몇 번인지 출력
flights_df %>%
filter(arr_delay<0 & dep_delay<0)
#8. 지연시간(arr_delay, dep_delay모두 0미만인 비행이 몇 번인지 출력
flights_df %>%
filter(arr_delay<0 & dep_delay<0) %>%
select(flight);
View(flight)
filter(origin=='JFK') %>%
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
filter(origin=='JFK') %>%
summarise(mean_arr_delay=mean(arr_delay)
mean_dep_delay=mean(dep_delay))
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
filter(origin=='JFK') %>%
summarise(mean_arr_delay=mean(arr_delay)
mean_dep_delay=mean(dep_delay))
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
filter(origin=='JFK') %>%
summarise(mean_arr_delay=mean(arr_delay),
mean_dep_delay=mean(dep_delay))
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
filter(origin=='JFK'&month==6) %>%
summarise(mean_arr_delay=mean(arr_delay),
mean_dep_delay=mean(dep_delay))
#9. 6월에 출발 공항이 JFK인 모든 항공편의 도착지연 및 출발지연 시간의 평균을 계산
flights_df %>%
filter(origin=='JFK'&month==6) %>%
summarise(mean(arr_delay),
mean(dep_delay))
#10. 9번의 결과에 title에 mean_arr, mean_dep로 출력
flights_df %>%
filter(origin=='JFK'&month==6) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
filter(month==6) %>%
summarise(n=n())
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
group by month%>%
summarise(n=n())
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
group by (month)%>%
summarise(n=n())
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
group_by(month)%>%
summarise(n=n())
exam %>%
group_by(class,) %>%
summarise(mean_math=mean(math),
n=n(),
max_eng=max(english)) %>%
arrange(mean_math)
library(dplyr)
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
group_by(month)%>%
summarise(n=n())
exam %>%
group_by(class,) %>%
summarise(mean_math=mean(math),
n=n(),
max_eng=max(english)) %>%
arrange(mean_math)
#3.6 집단별로 요약하기 group_by()+summarise()
exam %>%
group_by(class,) %>%
summarise(mean_math=mean(math),
n=n(),
max_eng=max(english)) %>%
arrange(mean_math)
#3.5 요약하기 :summarise()
#summarise 안에 들어갈 수 있는 요약함수들 : mean, sd, sum, min,mas,median,n
exam %>%
summarise(mean_math=mean(math))
exam %>%
group_by(class,) %>%
summarise(mean_math=mean(math),
n==n(),
max_eng=max(english)) %>%
arrange(mean_math)
#11. JFK 공항의 6월 운항 횟수
flights_df %>%
group_by(month)%>%
summarise(n==n())
#12. JFK 공항의 6월 운항 데이터 중 arr_delay열과 dep_delay열을 출력
flights_df %>%
filter(month==6) %>%
select(arr_delay,dep_delay);
#13. JFK 공항의 6월 운항 데이터 중 arr_delay열과 dep_delay열을 제외한 모든 열 출력
flights_df %>%
filter(month==6) %>%
select-(arr_delay,dep_delay);
#13. JFK 공항의 6월 운항 데이터 중 arr_delay열과 dep_delay열을 제외한 모든 열 출력
flights_df %>%
filter(month==6) %>%
select(-arr_delay,-dep_delay);
#14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)%>%
summarise(n==n())
#14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin,) %>%
summarise(n==n())
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin) %>%
summarise(n=n())
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by("origin")
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(month)
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(dest)
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)%>%
summarise(n=n())
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)%>%
summarise(n = n());
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin)
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin)%>%
summarise(n = n());
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin)%>%
count();
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin)%>%
count(origin);
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
count(origin);
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
tally()
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin)%>%
tally()
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)%>%
tally();
#15. 항공사코드(carrier)가 AA에 대해 출발공항별 비행횟수 계산
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin)%>%
tally()
#16. origin, dest별로 비행횟수 출력
flights_df %>%
group_by(origin)%>%
tally()
#16. origin, dest별로 비행횟수 출력
flights_df %>%
group_by(origin&dest)%>%
tally()
#16. origin, dest별로 비행횟수 출력
flights_df %>%
group_by(origin,dest)%>%
tally()
#17. 항공사코드(carrier)가 AA에 대해 origin, dest별로 비행횟수 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(origin,dest)%>%
tally();
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest,mean(arr_delay),mean(dep_delay))
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest)
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest) %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
filter(carrier
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest) %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest) %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest) %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay));
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
select(origin,dest) %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay));
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(month) %>%
select(origin,dest) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay));
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay));
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))%>%
select(origin,dest)
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay))%>%
select(origin,dest,mean_arr,mean_dep)
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA') %>%
group_by(month) %>%
summarise(mean_arr=mean(arr_delay),
mean_dep=mean(dep_delay));
#18. 항공사 코드가 AA에 대해, origin, dest, 월별 평균arr_delay, 평균 dep_delay 출력
flights_df %>%
filter(carrier=='AA')
#20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬)
flights_df %>%
filter(Origin=="JFK") %>%
arrange(dep_delay)
#20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬)
flights_df %>%
filter(origin=="JFK") %>%
arrange(dep_delay)
#20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬)
flights_df %>%
filter(origin=="JFK") %>%
arrange(dep_delay) %>%
select(dep_delay)
#20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬)
flights_df %>%
filter(origin=="JFK") %>%
arrange(dep_delay) %>%
select(dep_delay)
#20. Origin==“JFK”에 대해 월별 최대 출발 지연 시간 출력(month로 정렬)
flights_df %>%
filter(origin=="JFK") %>%
arrange(dep_delay) %>%
select(dep_delay)%>%
head(1)
#19. dep_delay>0가 참이거나 거짓, arr_delay>0가 참이거나 거짓인 각각의 비행횟수
flights_df %>%
filter(dep_delay>0) %>%
tally();
flights_df %>%
filter(dep_delay<=0) %>%
tally();
flights_df %>%
filter(qrr_delay>0) %>%
tally();
flights_df %>%
filter(arr_delay>0) %>%
tally();
flights_df %>%
filter(arr_delay<=0) %>%
tally();
###14. 출발 공항(origin)별 비행 수 출력 (JFK 81483 LGA 84433 EWR 87400)
flights_df %>%
group_by(origin)%>%
tally();
###11. JFK 공항의 6월 운항 횟수
flights_df %>%
group_by(month)%>%
tally();
flights_df %>%
filter(month==6) %>%
tally();
#7. arr_delay열과 dep_delay열을 출력하되 열이름을 delay_arr과 delay_dep로 변경
flights_df %>%
select(arr_delay,dep_delay)
#7. arr_delay열과 dep_delay열을 출력하되 열이름을 delay_arr과 delay_dep로 변경
flights_df %>%
select(delay_arr=arr_delay,delay_dep=dep_delay)
#7. arr_delay열과 dep_delay열을 출력하되 열이름을 delay_arr과 delay_dep로 변경
flights_df %>%
select(delay_arr=arr_delay,delay_dep=dep_delay) %>%
head(2)
apply(flights_df,2,mean)
[출처] apply, lapply, sapply, tapply, mapply|작성자 dlwngkdms63
apply(iris[,-5],2,sum)
apply(iris[,-5],2,sum)
resul<-flights_df[flights_df$origin='JFK'&& flights_df$month==5]
resul<-flights_df[flights_df$origin=='JFK'&& flights_df$month==5]
resul
#flights_df 데이터프레임에 대해 작성 제출
#1. origin이 JFK이고 month가 5월인 모든 행을 resul에 얻는다
resul<- flights_df %>%
filter(origin=='JFK' & month==5)
resul
resul<-flights_df[flights_df$origin=='JFK'& flights_df$month==5]
resul
resul<-head(flights_df[flights_df$origin=='JFK'& flights_df$month==5],2)
resul
head(resul,2)
resul<-head(resul,2)
resul
flights_df['arr_delay']
flights_df['year':'dep_time']
flights_df['year:dep_time']
resul
flights_df[,'year:dep_time']
flights_df[,1:4]
flights_df[year,dep_time]
flights_df['year','dep_time']
flights_df['year'|'dep_time']
flights_df['year'+'dep_time']
flights_df['year'&'dep_time']
flights_df['year''dep_time']
flights_df['year,dep_time']
flights_df[year,dep_time]
flights_df[,c(year,dep_time)]
flights_df %>%
select(year:dep_time)
flights_df[,c('year','dep_time')]
flights_df[,c('arr_delay','dep_time')]
flights_df[,c('arr_delay','dep_delay')]
